{"version":3,"sources":["components/Jax/Jax.module.css","components/Jax/Jax.svg","components/Jax/Iris.svg","containers/App.module.css","components/Jax/Jax.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","Jax","props","moveIris","event","iris","current","left","clientX","offsetWidth","top","clientY","offsetHeight","style","transform","React","createRef","className","classes","onMouseMove","JaxWrapper","src","JaxBackground","alt","JaxIris","ref","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EACAA,EAAOC,QAAU,CAAC,IAAM,SAAS,WAAa,SAAS,cAAgB,SAAS,QAAU,W,uBCD1FD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCC3CD,EAAOC,QAAU,CAAC,IAAM,W,2NCmDTC,E,YA9Cb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KASRC,SAAW,SAACC,GACV,IAAMC,EAAO,EAAKA,KAAKC,QACnBC,GAAQH,EAAMI,QAA8B,EAAnBH,EAAKI,aAAoB,GAClDC,GAAON,EAAMO,QAA+B,EAApBN,EAAKO,cAAqB,GAElDF,GAAO,IACTA,GAAO,IAGLA,GAAO,OACTA,EAAM,MAGJH,IAAS,IACXA,GAAQ,GAGNA,GAAQ,KACVA,EAAO,IAGTF,EAAKQ,MAAMC,UAAY,aAAeP,EAAO,MAAQG,EAAM,MA7B3D,EAAKL,KAAOU,IAAMC,YAFD,E,sEAkCT,IAAD,OACP,OACE,yBAAKC,UAAWC,IAAQjB,IAAKkB,YAAa,SAACf,GAAD,OAAW,EAAKD,SAASC,KACjE,yBAAKa,UAAWC,IAAQE,YACtB,yBAAKC,IAAKC,IAAeL,UAAWC,IAAQI,cAAeC,IAAI,QAC/D,yBAAKF,IAAKG,IAASP,UAAWC,IAAQM,QAASD,IAAI,MAAME,IAAKC,KAAKrB,a,GAxC3DsB,a,iBCQHC,E,iLAPX,OACE,yBAAKX,UAAWC,IAAQU,KACtB,kBAAC,EAAD,W,GAJUb,IAAMY,WCQJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3728fae1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Jax\":\"_MnaPH\",\"JaxWrapper\":\"_23l1O\",\"JaxBackground\":\"_O4amo\",\"JaxIris\":\"_2c0Q6\"};","module.exports = __webpack_public_path__ + \"static/media/Jax.86e0c5a5.svg\";","module.exports = __webpack_public_path__ + \"static/media/Iris.b2a9d1fc.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"_GD0rT\"};","import React, { Component } from 'react';\nimport classes from './Jax.module.css';\nimport JaxBackground from './Jax.svg';\nimport JaxIris from './Iris.svg';\n\nclass Jax extends Component {\n  constructor(props) {\n    super(props);\n    this.iris = React.createRef();\n  }\n\n  /**\n   * Move the iris with the mouse\n   *\n   * @param object event Mouse move event.\n   */\n  moveIris = (event) => {\n    const iris = this.iris.current;\n    let left = (event.clientX - (iris.offsetWidth * 2)) / 80;\n    let top = (event.clientY - (iris.offsetHeight * 2)) / 80;\n\n    if (top < -7) {\n      top = -10;\n    }\n\n    if (top >= 12.5) {\n      top = 12.5;\n    }\n\n    if (left <= -9) {\n      left = -9;\n    }\n\n    if (left >= 12) {\n      left = 12;\n    }\n\n    iris.style.transform = 'translate(' + left + '%, ' + top + '%)';\n  }\n\n  render() {\n    return(\n      <div className={classes.Jax} onMouseMove={(event) => this.moveIris(event)}>\n        <div className={classes.JaxWrapper}>\n          <img src={JaxBackground} className={classes.JaxBackground} alt=\"Jax\"/>\n          <img src={JaxIris} className={classes.JaxIris} alt=\"Jax\" ref={this.iris}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Jax;\n","import React from 'react';\nimport Jax from '../components/Jax/Jax'\nimport classes from './App.module.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className={classes.App}>\n        <Jax />\n      </div>\n    )}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}